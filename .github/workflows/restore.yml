name: Restore Terraform State

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to restore (dev, test, prod)"
        required: true
        default: "dev"
      version:
        description: "Optional: specific versionId of the tfstate blob to restore"
        required: false

permissions:
  id-token: write
  contents: read

jobs:
  restore:
    name: Restore ${{ github.event.inputs.environment }} state
    runs-on: ubuntu-latest

    env:
      ENV: ${{ github.event.inputs.environment }}
      TF_IN_AUTOMATION: true
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
      CONTAINER_NAME: ${{ secrets.STORAGE_CONTAINER }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true

      - name: Determine tfstate file
        run: echo "STATE_FILE=terraform-${ENV}.tfstate" >> $GITHUB_ENV

      - name: Determine rollback version
        id: version
        run: |
                # Hvis bruker spesifiserer en versjon, bruk den
                if [ -n "${{ github.event.inputs.version }}" ]; then
                  echo "Using specified version: ${{ github.event.inputs.version }}"
                  echo "VERSION_ID=${{ github.event.inputs.version }}" >> $GITHUB_ENV
                else
                  # Finn alle versjoner av blob
                  echo "finner alle versjoner av tfstate for miljÃ¸ $ENV i account $STORAGE_ACCOUNT, container $CONTAINER_NAME"
                  VERSIONS=$(az storage blob list \
                    --account-name $STORAGE_ACCOUNT \
                    --container-name $CONTAINER_NAME \
                    --prefix terraform-${ENV}.tfstate \
                    --include v \
                    --auth-mode login \
                    --query "[].{version:versionId,lastModified:properties.lastModified}" -o tsv)

                  if [ -z "$VERSIONS" ]; then
                    echo "No previous versions found, using latest blob"
                    echo "VERSION_ID=" >> $GITHUB_ENV
                  else
                    # Hent nest nyeste versjon (forrige)
                    PREV_VERSION=$(echo "$VERSIONS" | sort -r | sed -n '2p' | awk '{print $1}')
                    if [ -z "$PREV_VERSION" ]; then
                      echo "Only one version exists, using latest"
                      echo "VERSION_ID=" >> $GITHUB_ENV
                    else
                      echo "Using previous version: $PREV_VERSION"
                      echo "VERSION_ID=$PREV_VERSION" >> $GITHUB_ENV
                    fi
                  fi
                fi

      - name: Download blob for rollback
        run: |
          if [ -n "$VERSION_ID" ]; then
            echo "Downloading specific version $VERSION_ID..."
            az storage blob download \
              --account-name $STORAGE_ACCOUNT \
              --container-name $CONTAINER_NAME \
              --name terraform-${ENV}.tfstate \
              --file restore.tfstate \
              --version-id $VERSION_ID \
              --auth-mode login
          else
            echo "Downloading latest version..."
            az storage blob download \
              --account-name $STORAGE_ACCOUNT \
              --container-name $CONTAINER_NAME \
              --name terraform-${ENV}.tfstate \
              --file restore.tfstate \
              --auth-mode login
          fi

      - name: Restore tfstate to active blob
        run: |
          echo "Uploading restore.tfstate as active tfstate..."
          az storage blob upload \
            --account-name $STORAGE_ACCOUNT \
            --container-name $CONTAINER_NAME \
            --name terraform-${ENV}.tfstate \
            --file restore.tfstate \
            --overwrite \
            --auth-mode login

      - name: Terraform Init (Reconfigure)
        working-directory: module06/stacks
        run: terraform init -reconfigure -backend-config=../backend-configs/${ENV}.hcl

      - name: Terraform Plan (verify rollback)
        working-directory: module06/stacks
        run: terraform plan -var-file=../env/${ENV}.tfvars

      - name: Terraform Apply (confirm rollback)
        working-directory: module06/stacks
        run: terraform apply -auto-approve -var-file=../env/${ENV}.tfvars