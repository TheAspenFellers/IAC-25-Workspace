name: Restore Terraform State

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to restore (dev, test, prod)"
        required: true
        default: "dev"
      version:
        description: "Optional: specific versionId of the tfstate blob to restore"
        required: false

permissions:
  id-token: write
  contents: read

jobs:
  restore:
    name: Restore ${{ github.event.inputs.environment }} state
    runs-on: ubuntu-latest

    env:
      ENV: ${{ github.event.inputs.environment }}
      TF_IN_AUTOMATION: true
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
      CONTAINER_NAME: ${{ secrets.STORAGE_CONTAINER }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true

      - name: Determine tfstate file
        run: echo "STATE_FILE=terraform-${ENV}.tfstate" >> $GITHUB_ENV

      - name: List available tfstate versions
        run: |
          echo "Available tfstate versions for ${ENV}:"
          az storage blob list \
            --account-name $STORAGE_ACCOUNT \
            --container-name $CONTAINER_NAME \
            --prefix terraform-${ENV}.tfstate \
            --include v \
            --auth-mode login \
            --query "[].{Version:versionId, LastModified:properties.lastModified}" \
            -o table

      - name: Download selected version (or previous)
        run: |
          echo "Determining which version to restore..."
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION=${{ github.event.inputs.version }}
            echo "Using user-specified version: $VERSION"
            az storage blob download \
              --account-name $STORAGE_ACCOUNT \
              --container-name $CONTAINER_NAME \
              --name terraform-${ENV}.tfstate \
              --version-id $VERSION \
              --file restore.tfstate \
              --auth-mode login
          else
            # Get list of versions (if blob-versioning enabled)
            VERSIONS=$(az storage blob list \
              --account-name $STORAGE_ACCOUNT \
              --container-name $CONTAINER_NAME \
              --prefix terraform-${ENV}.tfstate \
              --include v \
              --auth-mode login \
              --query "reverse(sort_by([].{v:versionId, t:properties.lastModified}, &t))[1].v" \
              -o tsv)

            if [ -n "$VERSIONS" ]; then
              VERSION="$VERSIONS"
              echo "Using previous version: $VERSION"
              az storage blob download \
                --account-name $STORAGE_ACCOUNT \
                --container-name $CONTAINER_NAME \
                --name terraform-${ENV}.tfstate \
                --version-id $VERSION \
                --file restore.tfstate \
                --auth-mode login
            else
              echo "No previous version found, using latest blob..."
              az storage blob download \
                --account-name $STORAGE_ACCOUNT \
                --container-name $CONTAINER_NAME \
                --name terraform-${ENV}.tfstate \
                --file restore.tfstate \
                --auth-mode login
            fi
          fi


      - name: Restore tfstate as active
        run: |
          echo "Uploading restored tfstate as active..."
          az storage blob upload \
            --account-name $STORAGE_ACCOUNT \
            --container-name $CONTAINER_NAME \
            --name terraform-${ENV}.tfstate \
            --file restore.tfstate \
            --overwrite \
            --auth-mode login

      - name: Terraform Init (Reconfigure)
        working-directory: module06/stacks
        run: terraform init -reconfigure -backend-config=../backend-configs/${ENV}.hcl

      - name: Terraform Plan (verify rollback)
        working-directory: module06/stacks
        run: terraform plan -var-file=../env/${ENV}.tfvars

      - name: Terraform Apply (confirm rollback)
        working-directory: module06/stacks
        run: terraform apply -auto-approve -var-file=../env/${ENV}.tfvars
